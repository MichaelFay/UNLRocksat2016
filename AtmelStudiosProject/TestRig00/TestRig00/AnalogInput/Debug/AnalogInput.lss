
AnalogInput.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  000004aa  0000053e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004aa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  00800106  00800106  00000544  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000544  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000574  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000130  00000000  00000000  000005b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000100a  00000000  00000000  000006e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000681  00000000  00000000  000016ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006f8  00000000  00000000  00001d6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000024c  00000000  00000000  00002468  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005c8  00000000  00000000  000026b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000979  00000000  00000000  00002c7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  000035f5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__ctors_end>
   4:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
   8:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
   c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  10:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  14:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  18:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  1c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  20:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  24:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  28:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  2c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  30:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  34:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  38:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  3c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  40:	0c 94 ba 00 	jmp	0x174	; 0x174 <__vector_16>
  44:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  48:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  4c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  50:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  54:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  58:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  5c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  60:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  64:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	00 00       	nop
  6a:	00 08       	sbc	r0, r0
  6c:	00 02       	muls	r16, r16
  6e:	01 00       	.word	0x0001	; ????
  70:	00 03       	mulsu	r16, r16
  72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
  7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
  8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
  90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
  a0:	03 03 03 03                                         ....

000000a4 <port_to_output_PGM>:
  a4:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000ae <port_to_mode_PGM>:
  ae:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000b8 <__ctors_end>:
  b8:	11 24       	eor	r1, r1
  ba:	1f be       	out	0x3f, r1	; 63
  bc:	cf ef       	ldi	r28, 0xFF	; 255
  be:	d8 e0       	ldi	r29, 0x08	; 8
  c0:	de bf       	out	0x3e, r29	; 62
  c2:	cd bf       	out	0x3d, r28	; 61

000000c4 <__do_copy_data>:
  c4:	11 e0       	ldi	r17, 0x01	; 1
  c6:	a0 e0       	ldi	r26, 0x00	; 0
  c8:	b1 e0       	ldi	r27, 0x01	; 1
  ca:	ea ea       	ldi	r30, 0xAA	; 170
  cc:	f4 e0       	ldi	r31, 0x04	; 4
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <__do_copy_data+0x10>
  d0:	05 90       	lpm	r0, Z+
  d2:	0d 92       	st	X+, r0
  d4:	a6 30       	cpi	r26, 0x06	; 6
  d6:	b1 07       	cpc	r27, r17
  d8:	d9 f7       	brne	.-10     	; 0xd0 <__do_copy_data+0xc>

000000da <__do_clear_bss>:
  da:	21 e0       	ldi	r18, 0x01	; 1
  dc:	a6 e0       	ldi	r26, 0x06	; 6
  de:	b1 e0       	ldi	r27, 0x01	; 1
  e0:	01 c0       	rjmp	.+2      	; 0xe4 <.do_clear_bss_start>

000000e2 <.do_clear_bss_loop>:
  e2:	1d 92       	st	X+, r1

000000e4 <.do_clear_bss_start>:
  e4:	a1 31       	cpi	r26, 0x11	; 17
  e6:	b2 07       	cpc	r27, r18
  e8:	e1 f7       	brne	.-8      	; 0xe2 <.do_clear_bss_loop>
  ea:	0e 94 ab 00 	call	0x156	; 0x156 <main>
  ee:	0c 94 53 02 	jmp	0x4a6	; 0x4a6 <_exit>

000000f2 <__bad_interrupt>:
  f2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f6 <setup>:
int ledPin = 13;      // select the pin for the LED
int sensorValue = 0;  // variable to store the value coming from the sensor

void setup() {
  // declare the ledPin as an OUTPUT:
  pinMode(ledPin, OUTPUT);
  f6:	61 e0       	ldi	r22, 0x01	; 1
  f8:	80 91 00 01 	lds	r24, 0x0100
  fc:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <pinMode>

00000100 <loop>:
}

void loop() {
 100:	cf 93       	push	r28
 102:	df 93       	push	r29
  // read the value from the sensor:
  sensorValue = analogRead(sensorPin);
 104:	80 91 02 01 	lds	r24, 0x0102
 108:	0e 94 a0 01 	call	0x340	; 0x340 <analogRead>
 10c:	90 93 07 01 	sts	0x0107, r25
 110:	80 93 06 01 	sts	0x0106, r24
  // turn the ledPin on
  digitalWrite(ledPin, HIGH);
 114:	c0 e0       	ldi	r28, 0x00	; 0
 116:	d1 e0       	ldi	r29, 0x01	; 1
 118:	61 e0       	ldi	r22, 0x01	; 1
 11a:	88 81       	ld	r24, Y
 11c:	0e 94 22 02 	call	0x444	; 0x444 <digitalWrite>
  // stop the program for <sensorValue> milliseconds:
  delay(sensorValue);
 120:	60 91 06 01 	lds	r22, 0x0106
 124:	70 91 07 01 	lds	r23, 0x0107
 128:	07 2e       	mov	r0, r23
 12a:	00 0c       	add	r0, r0
 12c:	88 0b       	sbc	r24, r24
 12e:	99 0b       	sbc	r25, r25
 130:	0e 94 29 01 	call	0x252	; 0x252 <delay>
  // turn the ledPin off:
  digitalWrite(ledPin, LOW);
 134:	60 e0       	ldi	r22, 0x00	; 0
 136:	88 81       	ld	r24, Y
 138:	0e 94 22 02 	call	0x444	; 0x444 <digitalWrite>
  // stop the program for for <sensorValue> milliseconds:
  delay(sensorValue);
 13c:	60 91 06 01 	lds	r22, 0x0106
 140:	70 91 07 01 	lds	r23, 0x0107
 144:	07 2e       	mov	r0, r23
 146:	00 0c       	add	r0, r0
 148:	88 0b       	sbc	r24, r24
 14a:	99 0b       	sbc	r25, r25
 14c:	df 91       	pop	r29
 14e:	cf 91       	pop	r28
  // stop the program for <sensorValue> milliseconds:
  delay(sensorValue);
  // turn the ledPin off:
  digitalWrite(ledPin, LOW);
  // stop the program for for <sensorValue> milliseconds:
  delay(sensorValue);
 150:	0c 94 29 01 	jmp	0x252	; 0x252 <delay>

00000154 <initVariant>:
int atexit(void (* /*func*/ )()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
 154:	08 95       	ret

00000156 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
 156:	0e 94 65 01 	call	0x2ca	; 0x2ca <init>

	initVariant();
 15a:	0e 94 aa 00 	call	0x154	; 0x154 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 15e:	0e 94 7b 00 	call	0xf6	; 0xf6 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 162:	c0 e0       	ldi	r28, 0x00	; 0
 164:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
 166:	0e 94 80 00 	call	0x100	; 0x100 <loop>
		if (serialEventRun) serialEventRun();
 16a:	20 97       	sbiw	r28, 0x00	; 0
 16c:	e1 f3       	breq	.-8      	; 0x166 <main+0x10>
 16e:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 172:	f9 cf       	rjmp	.-14     	; 0x166 <main+0x10>

00000174 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
 174:	1f 92       	push	r1
 176:	0f 92       	push	r0
 178:	0f b6       	in	r0, 0x3f	; 63
 17a:	0f 92       	push	r0
 17c:	11 24       	eor	r1, r1
 17e:	2f 93       	push	r18
 180:	3f 93       	push	r19
 182:	8f 93       	push	r24
 184:	9f 93       	push	r25
 186:	af 93       	push	r26
 188:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
 18a:	80 91 09 01 	lds	r24, 0x0109
 18e:	90 91 0a 01 	lds	r25, 0x010A
 192:	a0 91 0b 01 	lds	r26, 0x010B
 196:	b0 91 0c 01 	lds	r27, 0x010C
	unsigned char f = timer0_fract;
 19a:	30 91 08 01 	lds	r19, 0x0108

	m += MILLIS_INC;
	f += FRACT_INC;
 19e:	23 e0       	ldi	r18, 0x03	; 3
 1a0:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
 1a2:	2d 37       	cpi	r18, 0x7D	; 125
 1a4:	20 f4       	brcc	.+8      	; 0x1ae <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
 1a6:	01 96       	adiw	r24, 0x01	; 1
 1a8:	a1 1d       	adc	r26, r1
 1aa:	b1 1d       	adc	r27, r1
 1ac:	05 c0       	rjmp	.+10     	; 0x1b8 <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
 1ae:	26 e8       	ldi	r18, 0x86	; 134
 1b0:	23 0f       	add	r18, r19
		m += 1;
 1b2:	02 96       	adiw	r24, 0x02	; 2
 1b4:	a1 1d       	adc	r26, r1
 1b6:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
 1b8:	20 93 08 01 	sts	0x0108, r18
	timer0_millis = m;
 1bc:	80 93 09 01 	sts	0x0109, r24
 1c0:	90 93 0a 01 	sts	0x010A, r25
 1c4:	a0 93 0b 01 	sts	0x010B, r26
 1c8:	b0 93 0c 01 	sts	0x010C, r27
	timer0_overflow_count++;
 1cc:	80 91 0d 01 	lds	r24, 0x010D
 1d0:	90 91 0e 01 	lds	r25, 0x010E
 1d4:	a0 91 0f 01 	lds	r26, 0x010F
 1d8:	b0 91 10 01 	lds	r27, 0x0110
 1dc:	01 96       	adiw	r24, 0x01	; 1
 1de:	a1 1d       	adc	r26, r1
 1e0:	b1 1d       	adc	r27, r1
 1e2:	80 93 0d 01 	sts	0x010D, r24
 1e6:	90 93 0e 01 	sts	0x010E, r25
 1ea:	a0 93 0f 01 	sts	0x010F, r26
 1ee:	b0 93 10 01 	sts	0x0110, r27
}
 1f2:	bf 91       	pop	r27
 1f4:	af 91       	pop	r26
 1f6:	9f 91       	pop	r25
 1f8:	8f 91       	pop	r24
 1fa:	3f 91       	pop	r19
 1fc:	2f 91       	pop	r18
 1fe:	0f 90       	pop	r0
 200:	0f be       	out	0x3f, r0	; 63
 202:	0f 90       	pop	r0
 204:	1f 90       	pop	r1
 206:	18 95       	reti

00000208 <micros>:
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
 208:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
 20a:	f8 94       	cli
	m = timer0_overflow_count;
 20c:	80 91 0d 01 	lds	r24, 0x010D
 210:	90 91 0e 01 	lds	r25, 0x010E
 214:	a0 91 0f 01 	lds	r26, 0x010F
 218:	b0 91 10 01 	lds	r27, 0x0110
#if defined(TCNT0)
	t = TCNT0;
 21c:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
 21e:	a8 9b       	sbis	0x15, 0	; 21
 220:	05 c0       	rjmp	.+10     	; 0x22c <micros+0x24>
 222:	2f 3f       	cpi	r18, 0xFF	; 255
 224:	19 f0       	breq	.+6      	; 0x22c <micros+0x24>
		m++;
 226:	01 96       	adiw	r24, 0x01	; 1
 228:	a1 1d       	adc	r26, r1
 22a:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
 22c:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
 22e:	ba 2f       	mov	r27, r26
 230:	a9 2f       	mov	r26, r25
 232:	98 2f       	mov	r25, r24
 234:	88 27       	eor	r24, r24
 236:	82 0f       	add	r24, r18
 238:	91 1d       	adc	r25, r1
 23a:	a1 1d       	adc	r26, r1
 23c:	b1 1d       	adc	r27, r1
 23e:	bc 01       	movw	r22, r24
 240:	cd 01       	movw	r24, r26
 242:	42 e0       	ldi	r20, 0x02	; 2
 244:	66 0f       	add	r22, r22
 246:	77 1f       	adc	r23, r23
 248:	88 1f       	adc	r24, r24
 24a:	99 1f       	adc	r25, r25
 24c:	4a 95       	dec	r20
 24e:	d1 f7       	brne	.-12     	; 0x244 <micros+0x3c>
}
 250:	08 95       	ret

00000252 <delay>:

void delay(unsigned long ms)
{
 252:	8f 92       	push	r8
 254:	9f 92       	push	r9
 256:	af 92       	push	r10
 258:	bf 92       	push	r11
 25a:	cf 92       	push	r12
 25c:	df 92       	push	r13
 25e:	ef 92       	push	r14
 260:	ff 92       	push	r15
 262:	6b 01       	movw	r12, r22
 264:	7c 01       	movw	r14, r24
	uint32_t start = micros();
 266:	0e 94 04 01 	call	0x208	; 0x208 <micros>
 26a:	4b 01       	movw	r8, r22
 26c:	5c 01       	movw	r10, r24

	while (ms > 0) {
 26e:	c1 14       	cp	r12, r1
 270:	d1 04       	cpc	r13, r1
 272:	e1 04       	cpc	r14, r1
 274:	f1 04       	cpc	r15, r1
 276:	01 f1       	breq	.+64     	; 0x2b8 <delay+0x66>
		yield();
 278:	0e 94 52 02 	call	0x4a4	; 0x4a4 <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
 27c:	0e 94 04 01 	call	0x208	; 0x208 <micros>
 280:	dc 01       	movw	r26, r24
 282:	cb 01       	movw	r24, r22
 284:	88 19       	sub	r24, r8
 286:	99 09       	sbc	r25, r9
 288:	aa 09       	sbc	r26, r10
 28a:	bb 09       	sbc	r27, r11
 28c:	88 3e       	cpi	r24, 0xE8	; 232
 28e:	93 40       	sbci	r25, 0x03	; 3
 290:	a1 05       	cpc	r26, r1
 292:	b1 05       	cpc	r27, r1
 294:	60 f3       	brcs	.-40     	; 0x26e <delay+0x1c>
			ms--;
 296:	21 e0       	ldi	r18, 0x01	; 1
 298:	c2 1a       	sub	r12, r18
 29a:	d1 08       	sbc	r13, r1
 29c:	e1 08       	sbc	r14, r1
 29e:	f1 08       	sbc	r15, r1
			start += 1000;
 2a0:	88 ee       	ldi	r24, 0xE8	; 232
 2a2:	88 0e       	add	r8, r24
 2a4:	83 e0       	ldi	r24, 0x03	; 3
 2a6:	98 1e       	adc	r9, r24
 2a8:	a1 1c       	adc	r10, r1
 2aa:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
 2ac:	c1 14       	cp	r12, r1
 2ae:	d1 04       	cpc	r13, r1
 2b0:	e1 04       	cpc	r14, r1
 2b2:	f1 04       	cpc	r15, r1
 2b4:	19 f7       	brne	.-58     	; 0x27c <delay+0x2a>
 2b6:	db cf       	rjmp	.-74     	; 0x26e <delay+0x1c>
			ms--;
			start += 1000;
		}
	}
}
 2b8:	ff 90       	pop	r15
 2ba:	ef 90       	pop	r14
 2bc:	df 90       	pop	r13
 2be:	cf 90       	pop	r12
 2c0:	bf 90       	pop	r11
 2c2:	af 90       	pop	r10
 2c4:	9f 90       	pop	r9
 2c6:	8f 90       	pop	r8
 2c8:	08 95       	ret

000002ca <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 2ca:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 2cc:	84 b5       	in	r24, 0x24	; 36
 2ce:	82 60       	ori	r24, 0x02	; 2
 2d0:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 2d2:	84 b5       	in	r24, 0x24	; 36
 2d4:	81 60       	ori	r24, 0x01	; 1
 2d6:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 2d8:	85 b5       	in	r24, 0x25	; 37
 2da:	82 60       	ori	r24, 0x02	; 2
 2dc:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 2de:	85 b5       	in	r24, 0x25	; 37
 2e0:	81 60       	ori	r24, 0x01	; 1
 2e2:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 2e4:	ee e6       	ldi	r30, 0x6E	; 110
 2e6:	f0 e0       	ldi	r31, 0x00	; 0
 2e8:	80 81       	ld	r24, Z
 2ea:	81 60       	ori	r24, 0x01	; 1
 2ec:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 2ee:	e1 e8       	ldi	r30, 0x81	; 129
 2f0:	f0 e0       	ldi	r31, 0x00	; 0
 2f2:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 2f4:	80 81       	ld	r24, Z
 2f6:	82 60       	ori	r24, 0x02	; 2
 2f8:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 2fa:	80 81       	ld	r24, Z
 2fc:	81 60       	ori	r24, 0x01	; 1
 2fe:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 300:	e0 e8       	ldi	r30, 0x80	; 128
 302:	f0 e0       	ldi	r31, 0x00	; 0
 304:	80 81       	ld	r24, Z
 306:	81 60       	ori	r24, 0x01	; 1
 308:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 30a:	e1 eb       	ldi	r30, 0xB1	; 177
 30c:	f0 e0       	ldi	r31, 0x00	; 0
 30e:	80 81       	ld	r24, Z
 310:	84 60       	ori	r24, 0x04	; 4
 312:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 314:	e0 eb       	ldi	r30, 0xB0	; 176
 316:	f0 e0       	ldi	r31, 0x00	; 0
 318:	80 81       	ld	r24, Z
 31a:	81 60       	ori	r24, 0x01	; 1
 31c:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 31e:	ea e7       	ldi	r30, 0x7A	; 122
 320:	f0 e0       	ldi	r31, 0x00	; 0
 322:	80 81       	ld	r24, Z
 324:	84 60       	ori	r24, 0x04	; 4
 326:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
 328:	80 81       	ld	r24, Z
 32a:	82 60       	ori	r24, 0x02	; 2
 32c:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
 32e:	80 81       	ld	r24, Z
 330:	81 60       	ori	r24, 0x01	; 1
 332:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 334:	80 81       	ld	r24, Z
 336:	80 68       	ori	r24, 0x80	; 128
 338:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 33a:	10 92 c1 00 	sts	0x00C1, r1
 33e:	08 95       	ret

00000340 <analogRead>:
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
 340:	8e 30       	cpi	r24, 0x0E	; 14
 342:	08 f0       	brcs	.+2      	; 0x346 <analogRead+0x6>
 344:	8e 50       	subi	r24, 0x0E	; 14
  
	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
#if defined(ADMUX)
	ADMUX = (analog_reference << 6) | (pin & 0x07);
 346:	87 70       	andi	r24, 0x07	; 7
 348:	20 91 04 01 	lds	r18, 0x0104
 34c:	90 e4       	ldi	r25, 0x40	; 64
 34e:	29 9f       	mul	r18, r25
 350:	90 01       	movw	r18, r0
 352:	11 24       	eor	r1, r1
 354:	82 2b       	or	r24, r18
 356:	80 93 7c 00 	sts	0x007C, r24
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
 35a:	80 91 7a 00 	lds	r24, 0x007A
 35e:	80 64       	ori	r24, 0x40	; 64
 360:	80 93 7a 00 	sts	0x007A, r24

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
 364:	80 91 7a 00 	lds	r24, 0x007A
 368:	86 fd       	sbrc	r24, 6
 36a:	fc cf       	rjmp	.-8      	; 0x364 <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
 36c:	80 91 78 00 	lds	r24, 0x0078
	high = ADCH;
 370:	20 91 79 00 	lds	r18, 0x0079
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
 374:	90 e0       	ldi	r25, 0x00	; 0
}
 376:	92 2b       	or	r25, r18
 378:	08 95       	ret

0000037a <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
 37a:	83 30       	cpi	r24, 0x03	; 3
 37c:	81 f0       	breq	.+32     	; 0x39e <turnOffPWM+0x24>
 37e:	28 f4       	brcc	.+10     	; 0x38a <turnOffPWM+0x10>
 380:	81 30       	cpi	r24, 0x01	; 1
 382:	99 f0       	breq	.+38     	; 0x3aa <turnOffPWM+0x30>
 384:	82 30       	cpi	r24, 0x02	; 2
 386:	a1 f0       	breq	.+40     	; 0x3b0 <turnOffPWM+0x36>
 388:	08 95       	ret
 38a:	87 30       	cpi	r24, 0x07	; 7
 38c:	a9 f0       	breq	.+42     	; 0x3b8 <turnOffPWM+0x3e>
 38e:	88 30       	cpi	r24, 0x08	; 8
 390:	b9 f0       	breq	.+46     	; 0x3c0 <turnOffPWM+0x46>
 392:	84 30       	cpi	r24, 0x04	; 4
 394:	d1 f4       	brne	.+52     	; 0x3ca <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 396:	80 91 80 00 	lds	r24, 0x0080
 39a:	8f 7d       	andi	r24, 0xDF	; 223
 39c:	03 c0       	rjmp	.+6      	; 0x3a4 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
 39e:	80 91 80 00 	lds	r24, 0x0080
 3a2:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 3a4:	80 93 80 00 	sts	0x0080, r24
 3a8:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
 3aa:	84 b5       	in	r24, 0x24	; 36
 3ac:	8f 77       	andi	r24, 0x7F	; 127
 3ae:	02 c0       	rjmp	.+4      	; 0x3b4 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
 3b0:	84 b5       	in	r24, 0x24	; 36
 3b2:	8f 7d       	andi	r24, 0xDF	; 223
 3b4:	84 bd       	out	0x24, r24	; 36
 3b6:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
 3b8:	80 91 b0 00 	lds	r24, 0x00B0
 3bc:	8f 77       	andi	r24, 0x7F	; 127
 3be:	03 c0       	rjmp	.+6      	; 0x3c6 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
 3c0:	80 91 b0 00 	lds	r24, 0x00B0
 3c4:	8f 7d       	andi	r24, 0xDF	; 223
 3c6:	80 93 b0 00 	sts	0x00B0, r24
 3ca:	08 95       	ret

000003cc <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
 3cc:	cf 93       	push	r28
 3ce:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	fc 01       	movw	r30, r24
 3d4:	e4 58       	subi	r30, 0x84	; 132
 3d6:	ff 4f       	sbci	r31, 0xFF	; 255
 3d8:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
 3da:	fc 01       	movw	r30, r24
 3dc:	e0 57       	subi	r30, 0x70	; 112
 3de:	ff 4f       	sbci	r31, 0xFF	; 255
 3e0:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
 3e2:	88 23       	and	r24, r24
 3e4:	61 f1       	breq	.+88     	; 0x43e <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	88 0f       	add	r24, r24
 3ea:	99 1f       	adc	r25, r25
 3ec:	fc 01       	movw	r30, r24
 3ee:	e2 55       	subi	r30, 0x52	; 82
 3f0:	ff 4f       	sbci	r31, 0xFF	; 255
 3f2:	c5 91       	lpm	r28, Z+
 3f4:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
 3f6:	fc 01       	movw	r30, r24
 3f8:	ec 55       	subi	r30, 0x5C	; 92
 3fa:	ff 4f       	sbci	r31, 0xFF	; 255
 3fc:	a5 91       	lpm	r26, Z+
 3fe:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
 400:	61 11       	cpse	r22, r1
 402:	09 c0       	rjmp	.+18     	; 0x416 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
 404:	9f b7       	in	r25, 0x3f	; 63
                cli();
 406:	f8 94       	cli
		*reg &= ~bit;
 408:	88 81       	ld	r24, Y
 40a:	20 95       	com	r18
 40c:	82 23       	and	r24, r18
 40e:	88 83       	st	Y, r24
		*out &= ~bit;
 410:	ec 91       	ld	r30, X
 412:	2e 23       	and	r18, r30
 414:	0b c0       	rjmp	.+22     	; 0x42c <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
 416:	62 30       	cpi	r22, 0x02	; 2
 418:	61 f4       	brne	.+24     	; 0x432 <pinMode+0x66>
		uint8_t oldSREG = SREG;
 41a:	9f b7       	in	r25, 0x3f	; 63
                cli();
 41c:	f8 94       	cli
		*reg &= ~bit;
 41e:	38 81       	ld	r19, Y
 420:	82 2f       	mov	r24, r18
 422:	80 95       	com	r24
 424:	83 23       	and	r24, r19
 426:	88 83       	st	Y, r24
		*out |= bit;
 428:	ec 91       	ld	r30, X
 42a:	2e 2b       	or	r18, r30
 42c:	2c 93       	st	X, r18
		SREG = oldSREG;
 42e:	9f bf       	out	0x3f, r25	; 63
 430:	06 c0       	rjmp	.+12     	; 0x43e <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
 432:	8f b7       	in	r24, 0x3f	; 63
                cli();
 434:	f8 94       	cli
		*reg |= bit;
 436:	e8 81       	ld	r30, Y
 438:	2e 2b       	or	r18, r30
 43a:	28 83       	st	Y, r18
		SREG = oldSREG;
 43c:	8f bf       	out	0x3f, r24	; 63
	}
}
 43e:	df 91       	pop	r29
 440:	cf 91       	pop	r28
 442:	08 95       	ret

00000444 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
 444:	1f 93       	push	r17
 446:	cf 93       	push	r28
 448:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
 44a:	28 2f       	mov	r18, r24
 44c:	30 e0       	ldi	r19, 0x00	; 0
 44e:	f9 01       	movw	r30, r18
 450:	e8 59       	subi	r30, 0x98	; 152
 452:	ff 4f       	sbci	r31, 0xFF	; 255
 454:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
 456:	f9 01       	movw	r30, r18
 458:	e4 58       	subi	r30, 0x84	; 132
 45a:	ff 4f       	sbci	r31, 0xFF	; 255
 45c:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
 45e:	f9 01       	movw	r30, r18
 460:	e0 57       	subi	r30, 0x70	; 112
 462:	ff 4f       	sbci	r31, 0xFF	; 255
 464:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
 466:	cc 23       	and	r28, r28
 468:	c9 f0       	breq	.+50     	; 0x49c <digitalWrite+0x58>
 46a:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 46c:	81 11       	cpse	r24, r1
 46e:	0e 94 bd 01 	call	0x37a	; 0x37a <turnOffPWM>

	out = portOutputRegister(port);
 472:	ec 2f       	mov	r30, r28
 474:	f0 e0       	ldi	r31, 0x00	; 0
 476:	ee 0f       	add	r30, r30
 478:	ff 1f       	adc	r31, r31
 47a:	ec 55       	subi	r30, 0x5C	; 92
 47c:	ff 4f       	sbci	r31, 0xFF	; 255
 47e:	a5 91       	lpm	r26, Z+
 480:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
 482:	8f b7       	in	r24, 0x3f	; 63
	cli();
 484:	f8 94       	cli

	if (val == LOW) {
 486:	11 11       	cpse	r17, r1
 488:	05 c0       	rjmp	.+10     	; 0x494 <digitalWrite+0x50>
		*out &= ~bit;
 48a:	9c 91       	ld	r25, X
 48c:	ed 2f       	mov	r30, r29
 48e:	e0 95       	com	r30
 490:	e9 23       	and	r30, r25
 492:	02 c0       	rjmp	.+4      	; 0x498 <digitalWrite+0x54>
	} else {
		*out |= bit;
 494:	ec 91       	ld	r30, X
 496:	ed 2b       	or	r30, r29
 498:	ec 93       	st	X, r30
	}

	SREG = oldSREG;
 49a:	8f bf       	out	0x3f, r24	; 63
}
 49c:	df 91       	pop	r29
 49e:	cf 91       	pop	r28
 4a0:	1f 91       	pop	r17
 4a2:	08 95       	ret

000004a4 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
 4a4:	08 95       	ret

000004a6 <_exit>:
 4a6:	f8 94       	cli

000004a8 <__stop_program>:
 4a8:	ff cf       	rjmp	.-2      	; 0x4a8 <__stop_program>
